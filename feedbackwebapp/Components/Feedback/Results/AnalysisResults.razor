@namespace FeedbackWebApp.Components.Feedback.Results
@inject IJSRuntime JSRuntime
@inject FeedbackWebApp.Services.UserSettingsService UserSettings
@inject ISpeechSynthesisService SpeechSynthesisService
@implements IDisposable

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger mt-4" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @Error
    </div>
}

@if (!string.IsNullOrEmpty(MarkdownResult))
{
    <div class="card mt-4 shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Analysis Summary</h5>            <div class="d-flex">
                <button class="btn btn-sm btn-outline-light me-2 @(_isSpeaking ? "btn-speak-active" : "")" @onclick="SpeakAnalysis">
                    <i class="bi @(_isSpeaking ? "bi-pause-fill" : "bi-volume-up-fill") me-1"></i>
                    @(_isSpeaking ? "Stop" : "Speak")
                </button>
                <button class="btn btn-sm btn-outline-light" @onclick="CopyToClipboard">
                    <i class="bi bi-clipboard me-1"></i>
                    Copy
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="markdown-body">
                @((MarkupString)Markdown.ToHtml(MarkdownResult))
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Error { get; set; }

    [Parameter]
    public string? MarkdownResult { get; set; }    private string? _previousMarkdown;
    private bool _isSpeaking = false;
    private System.Threading.Timer? _speakingTimer;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(MarkdownResult) && MarkdownResult != _previousMarkdown)
        {
            _previousMarkdown = MarkdownResult;
            await TriggerConfetti();
        }
    }

    protected override void OnInitialized()
    {
        // Check speaking status periodically
        _speakingTimer = new System.Threading.Timer(
            async _ => await CheckSpeakingStatus(), 
            null, 
            TimeSpan.Zero, 
            TimeSpan.FromMilliseconds(500));
    }    private async Task CheckSpeakingStatus()
    {
        try
        {
            if (_isSpeaking)
            {
                var stillSpeaking = await SpeechSynthesisService.Speaking;
                if (!stillSpeaking && _isSpeaking)
                {
                    _isSpeaking = false;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch
        {
            // If there's an error checking the status, assume we're not speaking
            if (_isSpeaking)
            {
                _isSpeaking = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task TriggerConfetti()
    {
        await JSRuntime.InvokeVoidAsync("confetti", new
        {
            particleCount = 100,
            spread = 70,
            origin = new { y = 0.6 }
        });
    }

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(MarkdownResult))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", MarkdownResult);
        }
    }    
    
    private async Task SpeakAnalysis()
    {
        if (!string.IsNullOrEmpty(MarkdownResult))
        {
            try
            {
                if (_isSpeaking)
                {
                    await SpeechSynthesisService.CancelAsync();
                    _isSpeaking = false;
                }
                else
                {
                    // Clean up the markdown text for better speech
                    var cleanText = MarkdownResult
                        .Replace("**", "")      // Remove bold markers
                        .Replace("*", "")       // Remove italic markers
                        .Replace("`", "")       // Remove code markers
                        .Replace("```", "")     // Remove code block markers
                        .Replace("\n- ", "\nâ€¢ ") // Better pronounce list items
                        .Replace("\n\n", ". ")  // Replace double newlines with pauses
                        .Replace("\n", ". ");   // Replace newlines with pauses

                    // Get user's preferred voice if set
                    var preferredVoiceUri = await UserSettings.GetPreferredVoiceAsync();
                    
                    // Create utterance
                    var utterance = new SpeechSynthesisUtterance
                    {
                        Text = cleanText,
                        Rate = 1.0f,
                        Pitch = 1.0f
                    };
                    
                    // Set user's preferred voice if available
                    if (!string.IsNullOrEmpty(preferredVoiceUri))
                    {
                        var voices = await SpeechSynthesisService.GetVoicesAsync();
                        var selectedVoice = voices.FirstOrDefault(v => v.VoiceURI == preferredVoiceUri);
                        
                        if (selectedVoice != null)
                        {
                            utterance.Voice = selectedVoice;
                        }
                    }
                    
                    // Speak the text
                    await SpeechSynthesisService.SpeakAsync(utterance);
                    _isSpeaking = true;
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error in speech synthesis: {ex.Message}");
                _isSpeaking = false;
                StateHasChanged();
            }
        }
    }   
    
    public void Dispose()
    {
        // Stop the timer
        _speakingTimer?.Dispose();
        _speakingTimer = null;
        
        // Ensure speech is stopped when component is disposed
        if (_isSpeaking)
        {
            _ = SpeechSynthesisService.CancelAsync();
        }
    }
}