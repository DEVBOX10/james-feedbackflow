@namespace FeedbackWebApp.Components.Feedback.Forms
@inject IJSRuntime JSRuntime
@using SharedDump.Utils
@using System.Collections.Generic

<div class="mt-4">
    <div class="form-floating mb-3">
        <input type="text" 
               class="form-control @(ContainsShortlinks ? "is-warning" : "")" 
               id="redditThreads" 
               @bind="ThreadsInput" 
               @bind:event="oninput" />
        <label for="redditThreads">Reddit Thread URLs or IDs (comma-separated)</label>
    </div>
    
    @if (ContainsShortlinks)
    {
        <div class="shortlink-warning alert alert-warning d-flex align-items-center justify-content-between" role="alert">
            <div>
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                Reddit shortlinks detected. These may not resolve correctly. 
                For best results, please visit the actual post page and copy the full URL.
            </div>
            <div>
                @foreach (var url in _shortlinkUrls)
                {                    <button type="button" 
                            class="btn btn-outline-secondary btn-sm ms-2 action-btn" 
                            @onclick="() => OpenShortlinkInNewWindow(url)">
                        <i class="bi bi-box-arrow-up-right me-1"></i>Open link
                    </button>
                }
            </div>
        </div>
    }
</div>

@code {
    private string _threadsInput = "";
    private bool _containsShortlinks = false;
    private List<string> _shortlinkUrls = new();

    public bool ContainsShortlinks => _containsShortlinks;

    public string ThreadsInput
    {
        get => _threadsInput;
        set
        {
            if (_threadsInput != value)
            {
                _threadsInput = value;
                
                ThreadIds = value.Split(',').Select(p => p.Trim()).ToArray();
                CheckForShortlinks();
            }
        }
    }

    public string[] ThreadIds { get; private set; } = Array.Empty<string>();

    private void CheckForShortlinks()
    {
        if (string.IsNullOrWhiteSpace(_threadsInput))
        {
            _containsShortlinks = false;
            _shortlinkUrls.Clear();
            return;
        }

        var urls = _threadsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(url => url.Trim())
            .ToArray();

        _shortlinkUrls = urls.Where(RedditUrlParser.IsRedditShortUrl).ToList();
        _containsShortlinks = _shortlinkUrls.Count > 0;
    }

    private async Task OpenShortlinkInNewWindow(string url)
    {
        // Ensure the URL has the http/https prefix
        if (!url.StartsWith("http://") && !url.StartsWith("https://"))
        {
            url = "https://" + url;
        }
        
        await JSRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    public void RefreshUI()
    {
        StateHasChanged();
    }
}