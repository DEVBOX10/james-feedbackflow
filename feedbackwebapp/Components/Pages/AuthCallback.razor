@page "/.auth/login/{provider}/callback"
@page "/.auth/login/aad/callback"
@page "/.auth/login/google/callback"
@page "/.auth/login/github/callback"
@namespace FeedbackWebApp.Components.Pages

@using FeedbackWebApp.Services.Authentication
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Completing Authentication...</PageTitle>

<div class="container-fluid d-flex justify-content-center align-items-center min-vh-100">
    <div class="card shadow-sm">
        <div class="card-body text-center p-4">
            <div class="spinner-border text-primary mb-3" role="status" aria-hidden="true"></div>
            <h5 class="card-title">Completing Authentication</h5>
            <p class="text-muted">Please wait while we complete your login...</p>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? Provider { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleAuthCallback();
        }
    }

    private async Task HandleAuthCallback()
    {
        try
        {
            // Clear cached authentication state to force refresh
            if (AuthService is EasyAuthService easyAuthService)
            {
                // Reset the authentication state to force a fresh check
                var resetMethod = typeof(EasyAuthService).GetMethod("ResetAuthenticationState", 
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                if (resetMethod != null)
                {
                    resetMethod.Invoke(easyAuthService, null);
                }
            }

            // Wait a moment for the authentication to be processed
            await Task.Delay(500);

            // Check if user is now authenticated
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            
            if (isAuthenticated)
            {
                // Try to get the intended redirect URL from query parameters or localStorage
                var redirectUrl = await GetRedirectUrl();
                
                if (!string.IsNullOrEmpty(redirectUrl))
                {
                    Navigation.NavigateTo(redirectUrl, forceLoad: true);
                }
                else
                {
                    // Default redirect to home page
                    Navigation.NavigateTo("/", forceLoad: true);
                }
            }
            else
            {
                // Authentication failed, redirect to home with error
                Navigation.NavigateTo("/?auth=failed", forceLoad: true);
            }
        }
        catch (Exception)
        {
            // Error during callback processing, redirect to home
            Navigation.NavigateTo("/?auth=error", forceLoad: true);
        }
    }

    private async Task<string?> GetRedirectUrl()
    {
        try
        {
            // First, check URL query parameters for post_login_redirect_url
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var redirectUrl = query["post_login_redirect_url"];
            
            if (!string.IsNullOrEmpty(redirectUrl))
            {
                return redirectUrl;
            }

            // Check localStorage for stored redirect URL
            var storedRedirect = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "feedbackflow_redirect_after_auth");
            
            if (!string.IsNullOrEmpty(storedRedirect))
            {
                // Clear the stored redirect URL
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "feedbackflow_redirect_after_auth");
                return storedRedirect;
            }

            return null;
        }
        catch
        {
            return null;
        }
    }
}
