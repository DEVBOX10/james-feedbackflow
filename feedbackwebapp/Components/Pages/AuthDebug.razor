@page "/auth-debug"
@namespace FeedbackWebApp.Components.Pages

@using FeedbackWebApp.Services.Authentication
@using System.Text.Json
@inject IConfiguration Configuration
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Authentication Debug - FeedbackFlow</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title">Authentication Debug</h3>
                    
                    <div class="mb-4">
                        <h5>Configuration</h5>
                        <ul>
                            <li><strong>UseEasyAuth:</strong> @useEasyAuth</li>
                            <li><strong>BypassInDevelopment:</strong> @bypassAuth</li>
                            <li><strong>Environment:</strong> @environment</li>
                            <li><strong>Current URL:</strong> @Navigation.Uri</li>
                        </ul>
                    </div>

                    <div class="mb-4">
                        <h5>Authentication Status</h5>
                        <ul>
                            <li><strong>Is Authenticated:</strong> @isAuthenticated</li>
                            <li><strong>Service Type:</strong> @AuthService.GetType().Name</li>
                            <li><strong>Current User:</strong> @(currentUser?.Name ?? "None")</li>
                            <li><strong>Auth Provider:</strong> @(currentUser?.AuthProvider ?? "None")</li>
                        </ul>
                    </div>

                    <div class="mb-4">
                        <h5>Easy Auth Test</h5>
                        <div class="d-flex gap-2 mb-3">
                            <button class="btn btn-primary" @onclick="TestEasyAuthMe">Test /.auth/me (C# HttpClient)</button>
                            <button class="btn btn-success" @onclick="TestEasyAuthMeJS">Test /.auth/me (JavaScript)</button>
                            <button class="btn btn-info" @onclick="TestEasyAuthMeJSDetailed">Test /.auth/me (JS Detailed)</button>
                            <button class="btn btn-outline-primary" @onclick="RefreshAuth">Refresh Auth Status</button>
                            <button class="btn btn-outline-secondary" @onclick="ClearCache">Clear Cache</button>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(easyAuthResult))
                        {
                            <div class="mt-3">
                                <h6>/.auth/me Response:</h6>
                                <pre class="bg-light p-2 rounded" style="max-height: 400px; overflow-y: auto;">@easyAuthResult</pre>
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(jsAuthResult))
                        {
                            <div class="mt-3">
                                <h6>JavaScript /.auth/me Response:</h6>
                                <pre class="bg-light p-2 rounded" style="max-height: 400px; overflow-y: auto;">@jsAuthResult</pre>
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(serviceDebugInfo))
                        {
                            <div class="mt-3">
                                <h6>Service Debug Info:</h6>
                                <pre class="bg-light p-2 rounded" style="max-height: 400px; overflow-y: auto;">@serviceDebugInfo</pre>
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                @errorMessage
                            </div>
                        }
                    </div>

                    <div class="mb-4">
                        <h5>Cookie Information</h5>
                        <button class="btn btn-outline-info" @onclick="GetCookieInfo">Get Cookie Info</button>
                        @if (!string.IsNullOrEmpty(cookieInfo))
                        {
                            <div class="mt-3">
                                <pre class="bg-light p-2 rounded">@cookieInfo</pre>
                            </div>
                        }
                    </div>

                    <div class="mb-4">
                        <h5>Local Storage Debug</h5>
                        <button class="btn btn-outline-info" @onclick="GetLocalStorageInfo">Get Local Storage Info</button>
                        @if (!string.IsNullOrEmpty(localStorageInfo))
                        {
                            <div class="mt-3">
                                <pre class="bg-light p-2 rounded">@localStorageInfo</pre>
                            </div>
                        }
                    </div>

                    <div class="mb-4">
                        <h5>Login URLs</h5>
                        <ul>
                            <li><strong>Microsoft:</strong> <a href="@GetLoginUrl("Microsoft")" target="_blank">@GetLoginUrl("Microsoft")</a></li>
                            <li><strong>Google:</strong> <a href="@GetLoginUrl("Google")" target="_blank">@GetLoginUrl("Google")</a></li>
                            <li><strong>GitHub:</strong> <a href="@GetLoginUrl("GitHub")" target="_blank">@GetLoginUrl("GitHub")</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool useEasyAuth;
    private bool bypassAuth;
    private string environment = "";
    private bool isAuthenticated;
    private SharedDump.Models.Authentication.AuthenticatedUser? currentUser;
    private string easyAuthResult = "";
    private string jsAuthResult = "";
    private string serviceDebugInfo = "";
    private string cookieInfo = "";
    private string localStorageInfo = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        useEasyAuth = Configuration.GetValue<bool>("Authentication:UseEasyAuth", false);
        bypassAuth = Configuration.GetValue<bool>("Authentication:BypassInDevelopment", false);
        environment = Configuration.GetValue<string>("ASPNETCORE_ENVIRONMENT") ?? "Unknown";
        
        await RefreshAuthStatus();
        GetServiceDebugInfo();
    }

    private async Task RefreshAuth()
    {
        await RefreshAuthStatus();
        GetServiceDebugInfo();
        StateHasChanged();
    }

    private async Task RefreshAuthStatus()
    {
        try
        {
            errorMessage = "";
            serviceDebugInfo = "Refreshing auth status...\n";
            
            var startTime = DateTime.Now;
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            var authCheckTime = DateTime.Now - startTime;
            
            serviceDebugInfo += $"IsAuthenticatedAsync() took: {authCheckTime.TotalMilliseconds}ms\n";
            serviceDebugInfo += $"IsAuthenticated result: {isAuthenticated}\n";
            
            if (isAuthenticated)
            {
                startTime = DateTime.Now;
                currentUser = await AuthService.GetCurrentUserAsync();
                var userCheckTime = DateTime.Now - startTime;
                serviceDebugInfo += $"GetCurrentUserAsync() took: {userCheckTime.TotalMilliseconds}ms\n";
                serviceDebugInfo += $"User: {(currentUser != null ? "Found" : "Null")}\n";
                
                if (currentUser != null)
                {
                    serviceDebugInfo += $"User details:\n";
                    serviceDebugInfo += $"  - UserId: {currentUser.UserId}\n";
                    serviceDebugInfo += $"  - Email: {currentUser.Email}\n";
                    serviceDebugInfo += $"  - Name: {currentUser.Name}\n";
                    serviceDebugInfo += $"  - Provider: {currentUser.AuthProvider}\n";
                    serviceDebugInfo += $"  - ProfileImageUrl: {currentUser.ProfileImageUrl}\n";
                }
            }
            else
            {
                currentUser = null;
                serviceDebugInfo += "User is not authenticated, not calling GetCurrentUserAsync()\n";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error refreshing auth status: {ex.Message}";
            serviceDebugInfo += $"Exception: {ex}\n";
        }
    }

    private async Task TestEasyAuthMeJSDetailed()
    {
        try
        {
            errorMessage = "";
            jsAuthResult = "";

            jsAuthResult = "Making detailed request via JavaScript fetch...\n\n";
            
            var response = await JSRuntime.InvokeAsync<object>("fetchAuthMeDetailed");
            var responseJson = JsonSerializer.Serialize(response, new JsonSerializerOptions { WriteIndented = true });
            
            jsAuthResult += "Detailed Response:\n";
            jsAuthResult += responseJson;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error testing detailed JavaScript /.auth/me: {ex.Message}";
            jsAuthResult += $"\nException Details:\n{ex}";
        }
        
        StateHasChanged();
    }

    private void GetServiceDebugInfo()
    {
        try
        {
            serviceDebugInfo += "\n=== SERVICE DEBUG INFO ===\n";
            serviceDebugInfo += $"Service Type: {AuthService.GetType().FullName}\n";
            serviceDebugInfo += $"Service Assembly: {AuthService.GetType().Assembly.FullName}\n";
            
            // Try to get internal state if it's EasyAuthService
            if (AuthService.GetType().Name == "EasyAuthService")
            {
                serviceDebugInfo += "\n--- EasyAuthService Internal State ---\n";
                
                // Use reflection to get private fields
                var serviceType = AuthService.GetType();
                var fields = serviceType.GetFields(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                
                foreach (var field in fields)
                {
                    try
                    {
                        var value = field.GetValue(AuthService);
                        serviceDebugInfo += $"{field.Name}: {value}\n";
                    }
                    catch (Exception ex)
                    {
                        serviceDebugInfo += $"{field.Name}: Error getting value - {ex.Message}\n";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            serviceDebugInfo += $"Error getting service debug info: {ex.Message}\n";
        }
    }

    private async Task TestEasyAuthMe()
    {
        try
        {
            errorMessage = "";
            easyAuthResult = "";

            var startTime = DateTime.Now;
            using var httpClient = new HttpClient();
            httpClient.Timeout = TimeSpan.FromSeconds(10);
            
            var baseUrl = Navigation.BaseUri.TrimEnd('/');
            easyAuthResult = $"Making request to: {baseUrl}/.auth/me\n";
            easyAuthResult += $"Using HttpClient from C#\n";
            easyAuthResult += $"Request started at: {startTime:yyyy-MM-dd HH:mm:ss.fff}\n\n";
            
            var response = await httpClient.GetAsync($"{baseUrl}/.auth/me");
            var requestTime = DateTime.Now - startTime;
            
            easyAuthResult += $"Request completed in: {requestTime.TotalMilliseconds}ms\n";
            easyAuthResult += $"Status: {response.StatusCode} ({(int)response.StatusCode})\n";
            easyAuthResult += $"Reason Phrase: {response.ReasonPhrase}\n\n";
            
            easyAuthResult += "Response Headers:\n";
            foreach (var header in response.Headers)
            {
                easyAuthResult += $"  {header.Key}: {string.Join(", ", header.Value)}\n";
            }
            
            easyAuthResult += "\nContent Headers:\n";
            foreach (var header in response.Content.Headers)
            {
                easyAuthResult += $"  {header.Key}: {string.Join(", ", header.Value)}\n";
            }
            
            var content = await response.Content.ReadAsStringAsync();
            easyAuthResult += $"\nContent Length: {content.Length}\n";
            easyAuthResult += "Content:\n";
            
            if (!string.IsNullOrEmpty(content))
            {
                try
                {
                    // Try to format JSON nicely
                    var jsonDocument = JsonDocument.Parse(content);
                    easyAuthResult += JsonSerializer.Serialize(jsonDocument, new JsonSerializerOptions { WriteIndented = true });
                }
                catch
                {
                    // If it's not valid JSON, just show raw content
                    easyAuthResult += content;
                }
            }
            else
            {
                easyAuthResult += "(Empty response)";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error testing /.auth/me: {ex.Message}";
            easyAuthResult += $"\nException Details:\n{ex}";
        }
        
        StateHasChanged();
    }

    private async Task TestEasyAuthMeJS()
    {
        try
        {
            errorMessage = "";
            jsAuthResult = "";

            var startTime = DateTime.Now;
            jsAuthResult = $"Making request via JavaScript fetch\n";
            jsAuthResult += $"Request started at: {startTime:yyyy-MM-dd HH:mm:ss.fff}\n\n";
            
            var response = await JSRuntime.InvokeAsync<string>("fetchAuthMe");
            var requestTime = DateTime.Now - startTime;
            
            jsAuthResult += $"Request completed in: {requestTime.TotalMilliseconds}ms\n";
            jsAuthResult += $"Response length: {response?.Length ?? 0}\n\n";
            
            if (!string.IsNullOrEmpty(response))
            {
                jsAuthResult += "Raw Response:\n";
                jsAuthResult += response + "\n\n";
                
                try
                {
                    // Try to format JSON nicely
                    var jsonDocument = JsonDocument.Parse(response);
                    jsAuthResult += "Formatted JSON:\n";
                    jsAuthResult += JsonSerializer.Serialize(jsonDocument, new JsonSerializerOptions { WriteIndented = true });
                }
                catch (Exception jsonEx)
                {
                    jsAuthResult += $"JSON parsing failed: {jsonEx.Message}\n";
                    jsAuthResult += "Content is not valid JSON or is empty array\n";
                }
            }
            else
            {
                jsAuthResult += "Response is null or empty";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error testing JavaScript /.auth/me: {ex.Message}";
            jsAuthResult += $"\nException Details:\n{ex}";
        }
        
        StateHasChanged();
    }

    private async Task GetCookieInfo()
    {
        try
        {
            cookieInfo = "";
            var cookies = await JSRuntime.InvokeAsync<string>("document.cookie");
            
            cookieInfo = $"All Cookies:\n{cookies}\n\n";
            
            if (cookies.Contains("AppServiceAuthSession"))
            {
                cookieInfo += "✅ AppServiceAuthSession cookie is present\n";
                
                // Try to extract just the auth session cookie
                var cookieArray = cookies.Split(';');
                var authCookie = cookieArray.FirstOrDefault(c => c.Trim().StartsWith("AppServiceAuthSession"));
                if (authCookie != null)
                {
                    cookieInfo += $"Auth Cookie: {authCookie.Trim()}\n";
                }
            }
            else
            {
                cookieInfo += "❌ AppServiceAuthSession cookie is NOT present\n";
                cookieInfo += "This indicates the user is not authenticated via Easy Auth\n";
            }
            
            // Check for other potential auth cookies
            var authRelatedCookies = new[] { "ARRAffinity", "ARRAffinitySameSite", ".AspNetCore.Antiforgery" };
            foreach (var cookieName in authRelatedCookies)
            {
                if (cookies.Contains(cookieName))
                {
                    cookieInfo += $"✅ {cookieName} cookie is present\n";
                }
            }
        }
        catch (Exception ex)
        {
            cookieInfo = $"Error getting cookie info: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private async Task GetLocalStorageInfo()
    {
        try
        {
            localStorageInfo = "Local Storage Contents:\n\n";
            
            // Check for specific keys we use
            var keysToCheck = new[] 
            {
                "feedbackflow_easyauth_user",
                "feedbackflow_debug_claims",
                "feedbackflow_redirect_after_auth",
                "theme"
            };
            
            foreach (var key in keysToCheck)
            {
                try
                {
                    var value = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", key);
                    localStorageInfo += $"{key}: {(value ?? "null")}\n";
                    
                    if (key == "feedbackflow_easyauth_user" && !string.IsNullOrEmpty(value))
                    {
                        try
                        {
                            var user = JsonSerializer.Deserialize<SharedDump.Models.Authentication.AuthenticatedUser>(value);
                            localStorageInfo += $"  Parsed user: {user?.Name} ({user?.Email})\n";
                        }
                        catch (Exception parseEx)
                        {
                            localStorageInfo += $"  Parse error: {parseEx.Message}\n";
                        }
                    }
                    else if (key == "feedbackflow_debug_claims" && !string.IsNullOrEmpty(value))
                    {
                        try
                        {
                            var debugData = JsonSerializer.Deserialize<object>(value);
                            localStorageInfo += $"  Debug claims data available (check raw value above)\n";
                        }
                        catch (Exception parseEx)
                        {
                            localStorageInfo += $"  Debug claims parse error: {parseEx.Message}\n";
                        }
                    }
                }
                catch (Exception ex)
                {
                    localStorageInfo += $"{key}: Error - {ex.Message}\n";
                }
            }
            
            // Get all localStorage keys
            try
            {
                var allKeys = await JSRuntime.InvokeAsync<string[]>("Object.keys", await JSRuntime.InvokeAsync<object>("eval", "localStorage"));
                localStorageInfo += $"\nAll localStorage keys: {string.Join(", ", allKeys)}\n";
            }
            catch (Exception ex)
            {
                localStorageInfo += $"\nError getting all keys: {ex.Message}\n";
            }
        }
        catch (Exception ex)
        {
            localStorageInfo = $"Error getting local storage info: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private async Task ClearCache()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "feedbackflow_easyauth_user");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "feedbackflow_redirect_after_auth");
            
            // Reset auth service state if possible
            var resetMethod = AuthService.GetType().GetMethod("ResetAuthenticationStateAsync");
            if (resetMethod != null)
            {
                var task = resetMethod.Invoke(AuthService, null) as Task;
                if (task != null)
                {
                    await task;
                }
            }
            
            errorMessage = "";
            easyAuthResult = "";
            jsAuthResult = "";
            serviceDebugInfo = "";
            cookieInfo = "";
            localStorageInfo = "";
            
            await RefreshAuthStatus();
            GetServiceDebugInfo();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error clearing cache: {ex.Message}";
        }
    }

    private string GetLoginUrl(string provider)
    {
        return AuthService.GetLoginUrl(provider, Navigation.Uri);
    }
}
