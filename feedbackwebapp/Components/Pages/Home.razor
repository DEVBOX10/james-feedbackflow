@page "/"
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using SharedDump.Models.YouTube
@using SharedDump.Utils
@using FeedbackWebApp.Components.Feedback
@using FeedbackWebApp.Components.Feedback.Services
@inject IConfiguration Configuration
@inject HttpClient Http

<PageTitle>FeedbackFlow</PageTitle>

<div class="min-vh-100 bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary mb-4">
        <div class="container">
            <span class="navbar-brand">🔄 FeedbackFlow</span>
        </div>
    </nav>

    <div class="container">
        @if (!isAuthenticated)
        {
            <AuthenticationForm OnAuthenticated="HandleAuthenticated" />
        }
        else
        {


            <div class="card shadow-sm">
                <div class="card-body">

                    <div class="mb-4">
                        <label for="sourceType" class="form-label fw-bold">Select Feedback Source</label>
                        <select id="sourceType" class="form-select form-select-lg" @bind="selectedSource">
                            <option value="">Choose a source...</option>
                            <option value="YouTube">📺 YouTube</option>
                            <option value="HackerNews">💡 Hacker News</option>
                            <option value="GitHub" disabled>📝 GitHub (Coming Soon)</option>
                        </select>
                    </div>

                   @*  <SourceSelector @bind-Value="selectedSource"/> *@

                    @if (selectedSource == "YouTube")
                    {
                        <YouTubeInputForm @ref="youtubeInput"/>
                    }
                    else if (selectedSource == "HackerNews")
                    {
                        <HackerNewsInputForm @ref="hackerNewsInputForm" />
                    }

                    <SubmitButton ShowWhenSource="@selectedSource" IsLoading="@isLoading" OnSubmit="SubmitFeedbackRequest" />
                    
                    <AnalysisResults Error="@error" MarkdownResult="@markdownResult" />
                    
                    <YouTubeComments Videos="@youtubeVideos" />
                </div>
            </div>
        }
    </div>
</div>

@code {
    private YouTubeInputForm? youtubeInput;
    private HackerNewsInputForm? hackerNewsInputForm;
    private string selectedSource = "";
    private string markdownResult = "";
    private string error = "";
    private bool isLoading = false;
    private bool isAuthenticated = false;
    private List<YouTubeOutputVideo>? youtubeVideos;

    private void HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        StateHasChanged();
    }

    private async Task SubmitFeedbackRequest()
    {
        try
        {
            error = "";
            markdownResult = "";
            youtubeVideos = null;
            isLoading = true;

            FeedbackService service = selectedSource switch
            {
                "YouTube" => new YouTubeFeedbackService(Http, Configuration,youtubeInput?.VideoIds ?? string.Empty, youtubeInput?.PlaylistIds ?? string.Empty),
                "HackerNews" => new HackerNewsFeedbackService(Http, Configuration, hackerNewsInputForm?.Value ?? string.Empty),
                _ => throw new InvalidOperationException("Please select a feedback source")
            };

            var (result, additionalData) = await service.GetFeedback();
            markdownResult = result;

            if (additionalData is List<YouTubeOutputVideo> videos)
            {
                youtubeVideos = videos;
            }
        }
        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
