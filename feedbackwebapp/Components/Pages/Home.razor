@page "/"
@using System.Text.Json
@using System.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Infrastructure
@using Microsoft.JSInterop
@using SharedDump.Models.YouTube
@using SharedDump.Models.GitHub
@using SharedDump.Models.Reddit
@using SharedDump.Utils
@using FeedbackWebApp.Components.Layout
@using FeedbackWebApp.Components.Feedback
@using FeedbackWebApp.Components.Feedback.Services
@inject IConfiguration Configuration
@inject HttpClient Http
@inject FeedbackServiceProvider ServiceProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Feedback Analysis - FeedbackFlow</PageTitle>

<div class="container">
    @if (!isAuthenticated)
    {
        <AuthenticationForm OnAuthenticated="HandleAuthenticated" />
    }
    else
    {
        <div class="mb-3">
            <h2 class="h4 mb-2 text-center">Select Feedback Source</h2>
            <SourceSelector @bind-SelectedSource="selectedSource" />
        </div>

        @if (!string.IsNullOrEmpty(selectedSource))
        {
            <div class="card shadow-sm">
                <div class="card-body">
                    @if (selectedSource.Equals("YouTube", StringComparison.OrdinalIgnoreCase))
                    {
                        <YouTubeInputForm @ref="youtubeInput"/>
                    }
                    else if (selectedSource.Equals("HackerNews", StringComparison.OrdinalIgnoreCase))
                    {
                        <HackerNewsInputForm @ref="hackerNewsInputForm" />
                    }
                    else if (selectedSource.Equals("GitHub", StringComparison.OrdinalIgnoreCase))
                    {
                        <GitHubInputForm @ref="githubInputForm" />
                    }
                    else if (selectedSource.Equals("Reddit", StringComparison.OrdinalIgnoreCase))
                    {
                        <RedditInputForm @ref="redditInputForm" />
                    }

                    <SubmitButton ShowWhenSource="@selectedSource" IsLoading="@isLoading" OnSubmit="SubmitFeedbackRequest" />
                    
                    @if (isLoading)
                    {
                        <div class="alert alert-info mt-3">
                            <div class="d-flex align-items-center">
                                <div class="spinner-border spinner-border-sm me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <div>
                                    <strong>@currentStatus</strong>
                                    <div class="small">@currentStatusMessage</div>
                                </div>
                            </div>
                        </div>
                    }

                    <AnalysisResults Error="@error" MarkdownResult="@markdownResult" />
                    
                    <YouTubeComments Videos="@youtubeVideos" />
                    
                    <GitHubFeedback Issues="@githubIssues" PullRequests="@githubPullRequests" Discussions="@githubDiscussions" />

                    <RedditComments Threads="@redditThreads" />
                </div>
            </div>
        }
    }
</div>

@code {
    private YouTubeInputForm? youtubeInput;
    private HackerNewsInputForm? hackerNewsInputForm;
    private GitHubInputForm? githubInputForm;
    private RedditInputForm? redditInputForm;
    private string selectedSource = "YouTube";
    private string markdownResult = "";
    private string error = "";
    private bool isLoading = false;
    private bool isAuthenticated = false;
    private List<YouTubeOutputVideo>? youtubeVideos;
    private List<GithubIssueModel>? githubIssues;
    private List<GithubIssueModel>? githubPullRequests;
    private List<GithubDiscussionModel>? githubDiscussions;
    private List<RedditThreadModel>? redditThreads;
    private FeedbackProcessStatus currentStatus;
    private string currentStatusMessage = "";
    private string? initialSource;
    private string? initialId;

    private void HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        StateHasChanged();
    }

    private void HandleStatusUpdate(FeedbackProcessStatus status, string message)
    {
        currentStatus = status;
        currentStatusMessage = message;
        StateHasChanged();
    }

    private async Task SubmitFeedbackRequest()
    {
        try
        {
            // Reset all previous data
            error = "";
            markdownResult = "";
            youtubeVideos = null;
            githubIssues = null;
            githubPullRequests = null;
            githubDiscussions = null;
            redditThreads = null;
            isLoading = true;

            IFeedbackService service = selectedSource switch
            {
                "YouTube" or "youtube" => ServiceProvider.CreateYouTubeService(
                    youtubeInput?.VideoIds ?? string.Empty, 
                    youtubeInput?.PlaylistIds ?? string.Empty, 
                    HandleStatusUpdate),
                "HackerNews" or "hackernews" => ServiceProvider.CreateHackerNewsService(
                    hackerNewsInputForm?.Value ?? string.Empty, 
                    HandleStatusUpdate),
                "GitHub" or "github" => ServiceProvider.CreateGitHubService(
                    githubInputForm?.Url ?? string.Empty,
                    HandleStatusUpdate),
                "Reddit" or "reddit" => ServiceProvider.CreateRedditService(
                    redditInputForm?.ThreadIds ?? Array.Empty<string>(),
                    HandleStatusUpdate),
                _ => throw new InvalidOperationException("Please select a feedback source")
            };

            var (result, additionalData) = await service.GetFeedback();
            markdownResult = result;

            // Handle specific data formats based on the source type
            if (additionalData is List<YouTubeOutputVideo> videos)
            {
                youtubeVideos = videos;
            }
            else if (selectedSource == "GitHub" && additionalData is List<GithubCommentModel> comments)
            {
                // For single GitHub items, we'll construct a minimal model to display the comments
                var parseResult = GitHubUrlParser.ParseUrl(githubInputForm?.Url ?? string.Empty);
                if (parseResult != null)
                {
                    var (owner, repo, type, number) = parseResult.Value;

                    if (type == "issue" || type == "pull")
                    {
                        githubIssues = new List<GithubIssueModel> 
                        {
                            new()
                            {
                                Id = "single-item",
                                Title = "Comments",
                                Author = "N/A",
                                Body = "",
                                URL = githubInputForm?.Url ?? "",
                                CreatedAt = DateTime.UtcNow,
                                LastUpdated = DateTime.UtcNow,
                                Upvotes = 0,
                                Labels = Array.Empty<string>(),
                                Comments = comments.ToArray()
                            }
                        };
                    }
                    else if (type == "discussion")
                    {
                        githubDiscussions = new List<GithubDiscussionModel>
                        {
                            new()
                            {
                                Title = "Comments",
                                Url = githubInputForm?.Url ?? "",
                                Comments = comments.ToArray()
                            }
                        };
                    }
                }
            }
            else if (additionalData is List<RedditThreadModel> threads)
            {
                redditThreads = threads;
            }
        }
        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            currentStatusMessage = "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        initialSource = query["source"];
        initialId = query["id"];

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(100); // Allow the UI to settle before executing the logic
        if (firstRender && !string.IsNullOrEmpty(initialSource) && !string.IsNullOrEmpty(initialId))
        {
            // Set the selected source first
            selectedSource = initialSource.ToLower() switch
            {
                "youtube" => "YouTube",
                "hackernews" => "HackerNews",
                "github" => "GitHub",
                "reddit" => "Reddit",
                _ => selectedSource
            };
            StateHasChanged();

            // Allow time for the component to render
            await Task.Delay(200);

            // Now handle the specific source
            if (selectedSource == "HackerNews" && hackerNewsInputForm != null)
            {
                hackerNewsInputForm.Value = initialId;
                hackerNewsInputForm.RefreshUI();
            }
            else if (selectedSource == "YouTube" && youtubeInput != null)
            {
                youtubeInput.VideoIds = initialId;
                youtubeInput.RefreshUI();
            }
            else if (selectedSource == "GitHub" && githubInputForm != null)
            {
                githubInputForm.Url = initialId;
                githubInputForm.RefreshUI();
            }
            else if (selectedSource == "Reddit" && redditInputForm != null)
            {
                redditInputForm.ThreadsInput = initialId;
                redditInputForm.RefreshUI();
            }

            StateHasChanged();
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }
}
