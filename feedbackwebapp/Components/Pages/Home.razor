@page "/"
@using System.Text.Json
@inject IConfiguration Configuration
@inject HttpClient Http

<PageTitle>FeedbackFlow</PageTitle>

<div class="min-vh-100 bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary mb-4">
        <div class="container">
            <span class="navbar-brand">🔄 FeedbackFlow</span>
        </div>
    </nav>

    <div class="container">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="mb-4">
                    <label for="sourceType" class="form-label fw-bold">Select Feedback Source</label>
                    <select id="sourceType" class="form-select form-select-lg" @bind="selectedSource">
                        <option value="">Choose a source...</option>
                        <option value="YouTube">📺 YouTube</option>
                        <option value="GitHub" disabled>📝 GitHub (Coming Soon)</option>
                        <option value="HackerNews" disabled>💡 Hacker News (Coming Soon)</option>
                    </select>
                </div>

                @if (selectedSource == "YouTube")
                {
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <input type="text" class="form-control" id="videoIds" @bind="videoIds" placeholder="Enter video IDs" />
                                <label for="videoIds">Video IDs (comma-separated)</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <input type="text" class="form-control" id="playlistIds" @bind="playlistIds" placeholder="Enter playlist IDs" />
                                <label for="playlistIds">Playlist IDs (comma-separated)</label>
                            </div>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(selectedSource))
                {
                    <button class="btn btn-primary btn-lg w-100" @onclick="SubmitFeedbackRequest" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Processing...</span>
                        }
                        else
                        {
                            <span>Get Feedback</span>
                        }
                    </button>
                }

                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-4" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        @error
                    </div>
                }

                @if (!string.IsNullOrEmpty(markdownResult))
                {
                    <div class="card mt-4 shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title mb-0">Results</h5>
                        </div>
                        <div class="card-body">
                            <div class="markdown-body">
                                @((MarkupString)markdownResult)
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string selectedSource = "";
    private string videoIds = "";
    private string playlistIds = "";
    private string markdownResult = "";
    private string error = "";
    private bool isLoading = false;

    private async Task SubmitFeedbackRequest()
    {
        error = "";
        markdownResult = "";
        isLoading = true;

        try
        {
            var baseUrl = Configuration["FeedbackApi:BaseUrl"] ?? throw new InvalidOperationException("API base URL not configured");

            if (selectedSource == "YouTube")
            {
                if (string.IsNullOrWhiteSpace(videoIds) && string.IsNullOrWhiteSpace(playlistIds))
                {
                    error = "Please enter at least one video ID or playlist ID";
                    return;
                }
                
                var requestBody = JsonSerializer.Serialize(new
                {
                    videos = videoIds,
                    playlist = playlistIds
                });

                var content = new StringContent(requestBody, System.Text.Encoding.UTF8, "application/json");
                var response = await Http.PostAsync(baseUrl, content);

                response.EnsureSuccessStatusCode();
                markdownResult = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
