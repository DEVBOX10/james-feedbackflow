@using FeedbackWebApp.Services.Authentication
@inject IConfiguration Configuration
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

@if (!useMockMode && !isAuthenticated && !isLoading)
{
    <div class="card shadow-sm">
        <div class="card-body">
            <h5 class="card-title">Authentication Required</h5>
            
            @if (useEasyAuth)
            {
                <p class="text-muted mb-3">Please log in to access this feature</p>
                <div class="d-flex flex-column gap-2">
                    <button class="btn btn-primary d-flex align-items-center justify-content-center gap-2" 
                            @onclick="@(() => LoginWithProvider(0))">
                        <i class="bi bi-microsoft"></i>
                        Login with Microsoft
                    </button>
                    
                    @* Future providers can be added here *@
                    @if (enabledProviders.Contains("Google"))
                    {
                        <button class="btn btn-outline-primary d-flex align-items-center justify-content-center gap-2" 
                                @onclick="@(() => LoginWithProvider(1))">
                            <i class="bi bi-google"></i>
                            Login with Google
                        </button>
                    }
                    
                    @if (enabledProviders.Contains("GitHub"))
                    {
                        <button class="btn btn-outline-primary d-flex align-items-center justify-content-center gap-2" 
                                @onclick="@(() => LoginWithProvider(2))">
                            <i class="bi bi-github"></i>
                            Login with GitHub
                        </button>
                    }
                </div>
            }
            else
            {
                <div class="form-floating mb-3">
                    <input type="password" class="form-control" id="password" @bind="password" @onkeyup="HandleKeyPress" placeholder="Enter password" />
                    <label for="password">Password</label>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-primary" @onclick="AuthenticateHandler">Login</button>
                </div>
            }
            
            @if (!string.IsNullOrEmpty(authError))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @authError
                </div>
            }
        </div>
    </div>
}
else
{ 
    <div class="card shadow-sm">
        <div class="card-body">
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            <span>Loading...</span>
        </div>
    </div>
}

@code {
    private string password = "";
    private string authError = "";
    private bool useMockMode;
    private bool useEasyAuth;
    private bool isAuthenticated;
    private bool isLoading = true;
    private List<string> enabledProviders = new();

    [Parameter]
    public EventCallback<bool> OnAuthenticated { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender) 
            return;
        try
        {
            useMockMode = Configuration.GetValue<bool>("FeedbackApi:UseMocks");
            useEasyAuth = Configuration.GetValue<bool>("Authentication:UseEasyAuth", false);
            
            // Load enabled providers
            var providersConfig = Configuration.GetSection("Authentication:Providers");
            enabledProviders.Clear();
            enabledProviders.Add("Microsoft"); // Always include Microsoft as default
            
            if (providersConfig.GetValue<bool>("Google:Enabled", false))
                enabledProviders.Add("Google");
            if (providersConfig.GetValue<bool>("GitHub:Enabled", false))
                enabledProviders.Add("GitHub");

            if (useMockMode)
            {
                await HandleAuthenticated(true);
                return;
            }

            // Check if already authenticated
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                await HandleAuthenticated(true);
                return;
            }

            // For password auth, check if password is configured
            if (!useEasyAuth)
            {
                var configuredPassword = Configuration["FeedbackApp:AccessPassword"];
                if (string.IsNullOrEmpty(configuredPassword))
                {
                    authError = "System error: Password not configured";
                }
            }

        }
        catch (Exception ex)
        {
            authError = $"System error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void LoginWithProvider(int provider)
    {
        try
        {
            var providerName = provider switch
            {
                0 => "Microsoft",
                1 => "Google",
                2 => "GitHub",
                _ => throw new ArgumentException("Invalid provider index")
            };
            var currentUrl = Navigation.Uri;
            var loginUrl = AuthService.GetLoginUrl(providerName, currentUrl);
            Navigation.NavigateTo(loginUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            authError = $"Error initiating login: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AuthenticateHandler();
        }
    }

    private async Task HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        await OnAuthenticated.InvokeAsync(success);
    }

    private async Task AuthenticateHandler()
    {
        var configuredPassword = Configuration["FeedbackApp:AccessPassword"];
        if (string.IsNullOrEmpty(configuredPassword))
        {
            authError = "System error: Password not configured";
            return;
        }

        // For password auth, we need to cast to the concrete type
        if (AuthService is AuthenticationService passwordAuthService)
        {
            var isAuthenticated = await passwordAuthService.AuthenticateAsync(password);
            if (isAuthenticated)
            {
                authError = "";
                await HandleAuthenticated(true);
            }
            else
            {
                authError = "Invalid password";
                password = "";
            }
        }
        else
        {
            authError = "Password authentication not supported in this mode";
        }
    }
}