@using FeedbackWebApp.Services.Authentication
@inject IConfiguration Configuration
@inject AuthenticationService AuthService

@if (!useMockMode && !isAuthenticated)
{
    <div class="card shadow-sm">
        <div class="card-body">
            <h5 class="card-title">Authentication Required</h5>
            <div class="form-floating mb-3">
                <input type="password" class="form-control" id="password" @bind="password" @onkeyup="HandleKeyPress" placeholder="Enter password" />
                <label for="password">Password</label>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-primary" @onclick="AuthenticateHandler">Login</button>
            </div>
            @if (!string.IsNullOrEmpty(authError))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @authError
                </div>
            }
        </div>
    </div>
}

@code {
    private string password = "";
    private string authError = "";
    private bool useMockMode;
    private bool isAuthenticated;

    [Parameter]
    public EventCallback<bool> OnAuthenticated { get; set; }

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender) 
            return;
            
        useMockMode = Configuration.GetValue<bool>("FeedbackApi:UseMocks");
        if (useMockMode)
        {
            await HandleAuthenticated(true);
            return;
        }

        // Check if already authenticated
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            await HandleAuthenticated(true);
            return;
        }

        var configuredPassword = Configuration["FeedbackApp:AccessPassword"];
        if (string.IsNullOrEmpty(configuredPassword))
        {
            authError = "System error: Password not configured";
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AuthenticateHandler();
        }
    }

    private async Task HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        await AuthService.SetAuthenticatedAsync(success);
        await OnAuthenticated.InvokeAsync(success);
    }

    private async Task AuthenticateHandler()
    {
        var configuredPassword = Configuration["FeedbackApp:AccessPassword"];
        if (string.IsNullOrEmpty(configuredPassword))
        {
            authError = "System error: Password not configured";
            return;
        }

        if (password == configuredPassword)
        {
            authError = "";
            await HandleAuthenticated(true);
        }
        else
        {
            authError = "Invalid password";
            password = "";
        }
    }
}