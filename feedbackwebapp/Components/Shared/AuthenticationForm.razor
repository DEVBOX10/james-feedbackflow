@inject IConfiguration Configuration
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (!useMockMode && !isAuthenticated && !isLoading)
{
    <div class="card shadow-sm">
        <div class="card-body">
            <h5 class="card-title">Authentication Required</h5>
            <p class="text-muted mb-3">Please log in to access this feature</p>
            <div class="d-flex flex-column gap-2">
                <button class="btn btn-primary d-flex align-items-center justify-content-center gap-2" 
                        @onclick="@(async () => await LoginWithProvider("Microsoft"))">
                    <i class="bi bi-microsoft"></i>
                    Login with Microsoft
                </button>
                
                @if (enabledProviders.Contains("Google"))
                {
                    <button class="btn btn-outline-primary d-flex align-items-center justify-content-center gap-2" 
                            @onclick="@(async () => await LoginWithProvider("Google"))">
                        <i class="bi bi-google"></i>
                        Login with Google
                    </button>
                }
                
                @if (enabledProviders.Contains("GitHub"))
                {
                    <button class="btn btn-outline-primary d-flex align-items-center justify-content-center gap-2" 
                            @onclick="@(async () => await LoginWithProvider("GitHub"))">
                        <i class="bi bi-github"></i>
                        Login with GitHub
                    </button>
                }
            </div>
            
            @if (!string.IsNullOrEmpty(authError))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @authError
                </div>
            }
        </div>
    </div>
}
else
{ 
    <div class="card shadow-sm">
        <div class="card-body">
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            <span>Loading...</span>
        </div>
    </div>
}

@code {
    private string authError = "";
    private bool useMockMode;
    private bool isAuthenticated;
    private bool isLoading = true;
    private List<string> enabledProviders = new();

    [Parameter]
    public EventCallback<bool> OnAuthenticated { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender) 
            return;
        try
        {
            useMockMode = Configuration.GetValue<bool>("FeedbackApi:UseMocks");
            
            // Load enabled providers
            enabledProviders.Clear();
            enabledProviders.Add("Microsoft"); // Always enabled
            
            // Add other providers based on configuration if needed
            // enabledProviders.Add("Google");
            // enabledProviders.Add("GitHub");

            if (useMockMode)
            {
                await HandleAuthenticated(true);
                return;
            }

            // Check if already authenticated
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                await HandleAuthenticated(true);
                return;
            }
        }
        catch (Exception ex)
        {
            authError = $"System error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoginWithProvider(string provider)
    {
        try
        {
            // Store current URL for redirect after authentication
            var currentUrl = Navigation.Uri;
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "feedbackflow_redirect_after_auth", currentUrl);
            
            // Clear any existing auth data to ensure fresh login
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "feedbackflow_easyauth_user");
            
            var loginUrl = AuthService.GetLoginUrl(provider, currentUrl);
            Navigation.NavigateTo(loginUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            authError = $"Error initiating login: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        await OnAuthenticated.InvokeAsync(success);
    }
}